/**
 * Generated by orval v6.9.0 üç∫
 * Do not edit manually.
 * WonderingPill API Docs
 * WonderingPill API description
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  AuthControllerSignupUser201,
  CreateUserDto
} from './model'
import {
  rest
} from 'msw'


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


export const appControllerGetHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/`,options
    );
  }


export const getAppControllerGetHelloQueryKey = () => [`/`];

    
export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = AxiosError<unknown>

export const useAppControllerGetHello = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * Ïú†Ï†ÄÎ•º ÏÉùÏÑ±ÌïúÎã§.
 * @summary Ïú†Ï†Ä ÏÉùÏÑ±(ÌöåÏõêÍ∞ÄÏûÖ) API
 */
export const authControllerSignupUser = (
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthControllerSignupUser201>> => {
    return axios.post(
      `/auth/signup`,
      createUserDto,options
    );
  }



    export type AuthControllerSignupUserMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerSignupUser>>>
    export type AuthControllerSignupUserMutationBody = CreateUserDto
    export type AuthControllerSignupUserMutationError = AxiosError<void>

    export const useAuthControllerSignupUser = <TError = AxiosError<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerSignupUser>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerSignupUser>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerSignupUser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof authControllerSignupUser>>, TError, {data: CreateUserDto}, TContext>(mutationFn, mutationOptions)
    }
    


export const getWonderingPillAPIDocsMSW = () => [
rest.get('*/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/auth/signup', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
